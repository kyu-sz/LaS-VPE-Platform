/**
 * \file    Neo4jConnector.java
 * \brief   Insert the results into neo4j database; the results are generated by
 * other application modules, e.g., tracking, attributes recognition,
 * and so on.
 *
 * @version 1.0 on 2017/04/12; 1.1 on 2017/04/17
 * @author  houjing.huang
 */

package org.cripac.isee.vpe.data;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

import javax.annotation.Nonnull;

import org.apache.commons.codec.binary.Base64;
import org.cripac.isee.alg.pedestrian.attr.Attributes;
import org.cripac.isee.alg.pedestrian.attr.Hour;
import org.cripac.isee.alg.pedestrian.attr.Minute;
import org.cripac.isee.alg.pedestrian.attr.ReIdAttributesTemp;
import org.cripac.isee.alg.pedestrian.reid.Feature;
import org.cripac.isee.alg.pedestrian.reid.FeatureMSCAN;
import org.cripac.isee.alg.pedestrian.tracking.Tracklet;
import org.cripac.isee.alg.pedestrian.tracking.Tracklet.BoundingBox;
import org.cripac.isee.vpe.util.logging.Logger;
import org.neo4j.driver.v1.AuthTokens;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.GraphDatabase;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Values;

/**
 * \class Neo4jConnector
 * \brief It inherits from GraphDatabaseConnector that inserts results into graph
 * database.
 */
public class Neo4jConnector extends GraphDatabaseConnector {

    private Driver driver = GraphDatabase.driver("bolt://172.18.33.37:7687",
            AuthTokens.basic("neo4j", "casia@1234"));

    protected void finalize() throws Throwable {
        try {
            driver.close();
        } finally {
            super.finalize();
        }
    }

    /**
     * Calculate the start time of a tracklet based on start frame index, fps
     * and the start time of the video.
     *
     * @param trackletStartIdx start frame index of a tracklet.
     * @param videoStartTime start time of the video.
     * @return the start time of a tracklevideoStartTime start time of the video.
     * created by da.li on 2014/04/18
     */
    private String calTrackletStartTime(@Nonnull int trackletStartIdx,
                                        @Nonnull String videoStartTime) {
        final int fpsDenominator = 2;
        final int fpsNumerator = 25;
        final int secPos = 12;
        final int minPos = 10;

        int trackletDuration = trackletStartIdx * fpsDenominator / fpsNumerator;
        // Confirm second:
        int secOld = 0;
        try {
            secOld = Integer.parseInt(videoStartTime.substring(secPos));
        } catch(NumberFormatException e) {
        }
        int min = (secOld + trackletDuration) / 60;
        int sec = (secOld + trackletDuration) % 60;
        String secNew = null;
        if (sec < 10) {
            secNew = "0" + sec;
        } else {
            secNew = "" + sec;
        }
        // Confirm minute:
        int minOld = 0;
        try {
            minOld = Integer.parseInt(videoStartTime.substring(minPos, secPos));
        } catch(NumberFormatException e) {
        }
        int hour = (minOld + min) / 60;
        min  = (minOld + min) % 60;
        String minNew = null;
        if (min < 10) {
            minNew = "0" + min;
        } else {
            minNew = "" + min;
        }
        // Confirm hour:
        int hourOld = 0;
        try {
            hourOld = Integer.parseInt(videoStartTime.substring(0, minPos));
        } catch(NumberFormatException e) {
        }
        hour = hourOld + hour;

        // Finally, get start time of a tracklet.
        String trackletStartTime = "" + hour + minNew + secNew;

        return trackletStartTime;
    }

    // Modified by da.li on 2017/04/18:
    // Set start frame-index and time; create relation between person node and
    // time tree.
    @Override
    public void setTrackletSavingPath(@Nonnull String nodeID, @Nonnull String path,Logger logger) {
        // Set path to an existing node or one newly created.
        Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {trackletID}}) SET p.path={path};",
                Values.parameters("trackletID", nodeID, "path", path));
        logger.info("插入的是："+nodeID+":"+path);
        // Get the info of a tracklet.
        // Test (we don't need host:port when run on our platform).
        //String hostPort = "har://hdfs-kman-nod2:8020";
        //String storeDir = hostPort + path;
        //System.out.println("storeDir: " + storeDir);
        // End
        /*String storeDir = path;
        String trackletInfo = "1024";
        try {
            trackletInfo = getTrackletInfo(storeDir);
        } catch(IOException e1) {
        } catch(URISyntaxException e2) {
        }

        JsonParser jParser = new JsonParser();
        JsonObject jObject = jParser.parse(trackletInfo).getAsJsonObject();
        
        // Start frame index of a tracklet.
        int trackletStartIdx = jObject.get("run-frame-index").getAsInt();
        JsonObject jObjectId = jObject.get("id").getAsJsonObject();
        String videoStartTime= jObjectId.get("video-url").getAsString();
        // split videoStartTime with "-".
        videoStartTime = videoStartTime.split("-")[0];
        
        // bounding boxes.
        JsonArray jArrayBoundingBoxes = jObject.get("bounding-boxes").getAsJsonArray();
        String bbCoordinatesInfo = jArrayBoundingBoxes.toString();

        // Start time of a tracklet.
        String trackletStartTime = calTrackletStartTime(trackletStartIdx, 
                                                        videoStartTime);
        // Insert the information of boundingboxes, start time and start frame index.
        session.run("MATCH (p:Person {id: {id}}) SET " 
                  + "p.startTime=toint({startTime}), "
                  + "p.startIndex={startIndex}, "
                  + "p.boundingBoxes={boundingBoxes};",
                   Values.parameters(
                   "id", nodeID,
                   "startTime", trackletStartTime,
                   "startIndex",trackletStartIdx,
                   "boundingBoxes", bbCoordinatesInfo));
        // Insert relation.
        String queryYear = trackletStartTime.substring(0,4);
        String queryMon  = trackletStartTime.substring(0,6);
        String queryDay  = trackletStartTime.substring(0,8);
        String queryHour = trackletStartTime.substring(0,10);
        String run = "MATCH (n:Root)-[:HAS_YEAR]->(y:Year {year: toint({year})})-[:HAS_MONTH]->" +
        "(mon:Month {month: toint({month})})-[:HAS_DAY]->(d:Day {day: toint({day})})-[:HAS_HOUR]->" + 
        "(h:Hour {hour: toint({hour})})-[:HAS_MIN]->(min) WHERE toint(tostring(min.start)+'00')<=" +
        "toint({trackletStartTime}) AND toint({trackletStartTime})<=toint(tostring(min.end)+'59') " +
        "MATCH (p:Person {id: {id}}) MERGE (min)-[:INCLUDES_PERSON]->(p);";
        session.run(run, Values.parameters(
            "year", queryYear,
            "month",queryMon,
            "day",  queryDay,
            "hour", queryHour,
            "trackletStartTime", trackletStartTime,
            "trackletStartTime", trackletStartTime,
            "id",   nodeID
        ));
*/
        // Close session.
        session.close();
    }
    
    @Override
    public void setSaveTracklet(@Nonnull Tracklet tracklet,Logger logger) {
        // Set path to an existing node or one newly created.
        Session session = driver.session();
        int trackletStartIdx = tracklet.startFrameIndex;
        String videoStartTime= tracklet.id.videoID;
        // split videoStartTime with "-".
        videoStartTime = videoStartTime.split("-")[0];
        
        // bounding boxes.
        BoundingBox[] jArrayBoundingBoxes = tracklet.locationSequence;
        String bbCoordinatesInfo = jArrayBoundingBoxes.toString();

        // Start time of a tracklet.
        String trackletStartTime = calTrackletStartTime(trackletStartIdx, 
                                                        videoStartTime);
        // Insert the information of boundingboxes, start time and start frame index.
        session.run("MERGE (p:Person {trackletID: {trackletID}}) SET " 
                  + "p.startTime=toint({startTime}), "
                  + "p.startIndex={startIndex}, "
                  + "p.boundingBoxes={boundingBoxes};",
                   Values.parameters(
                   "trackletID", tracklet.id,
                   "startTime", trackletStartTime,
                   "startIndex",trackletStartIdx,
                   "boundingBoxes", bbCoordinatesInfo));
        // Insert relation.
        String queryYear = trackletStartTime.substring(0,4);
        String queryMon  = trackletStartTime.substring(0,6);
        String queryDay  = trackletStartTime.substring(0,8);
        String queryHour = trackletStartTime.substring(0,10);
        String run = "MERGE (n:Root)-[:HAS_YEAR]->(y:Year {year: toint({year})})-[:HAS_MONTH]->" +
        "(mon:Month {month: toint({month})})-[:HAS_DAY]->(d:Day {day: toint({day})})-[:HAS_HOUR]->" + 
        "(h:Hour {hour: toint({hour})})-[:HAS_MIN]->(min) WHERE toint(tostring(min.start)+'00')<=" +
        "toint({trackletStartTime}) AND toint({trackletStartTime})<=toint(tostring(min.end)+'59') " +
        "MATCH (p:Person {trackletID: {trackletID}}) MERGE (min)-[:INCLUDES_PERSON]->(p);";
        session.run(run, Values.parameters(
            "year", queryYear,
            "month",queryMon,
            "day",  queryDay,
            "hour", queryHour,
            "trackletStartTime", trackletStartTime,
            "trackletStartTime", trackletStartTime,
            "trackletID",   tracklet.id
        ));

        logger.info("neo4j save tracklet:"+tracklet.toString());
        logger.info("----------------neo4j-------------------------");
        // Close session.
        session.close();
    }
    
    @Override
    public void setTrackletSavingPathFlag(@Nonnull String nodeID,@Nonnull Boolean flag,Logger logger) {
        // Set path to an existing node or one newly created.
        Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {trackletID}}) SET p.flag={flag};",
                Values.parameters("trackletID", nodeID, "flag", flag));
      
        logger.info("插入的是："+nodeID+":"+flag);
        // Close session.
        session.close();
    }
    
    @Override
    public void setTrackletSavingVideoPath(@Nonnull String nodeID,@Nonnull String videoPath) {
        // Set path to an existing node or one newly created.
        Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {trackletID}}) SET p.videoPath={videoPath};",
                Values.parameters("trackletID", nodeID, "videoPath", videoPath));
      

        // Close session.
        session.close();
    }
    @Override
    public String getTrackletSavingDir(@Nonnull String nodeID) throws NoSuchElementException {
        // Return path of an existing node, otherwise, return nothing.
        Session session = driver.session();
        StatementResult result = session.run("MATCH (p:Person {trackletID: {trackletID}}) RETURN p.path;",
                Values.parameters("trackletID", nodeID));
        session.close();
        if (result.hasNext()) {
            // Just return the first match.
            Record record = result.next();
            return record.get("p.path").asString();
        }
        // No match.
        throw new NoSuchElementException();
    }

    @Override
    public void setPedestrianSimilarity(@Nonnull String idA, @Nonnull String idB, float similarity) {
        // Directed relationship from idA to idB.
        // If one of idA and idB does not exist, do nothing.
        // If relationship already exists, change the value; Otherwise, create a relationship and set the value.
        Session session = driver.session();
        session.run("MATCH (p1:Person {trackletID: {id1}}), (p2:Person {trackletID: {id2}}) " +
                        "MERGE (p1)-[s:Similar]->(p2) " +
                        "SET s.similarity={sim};",
                Values.parameters("id1", idA, "id2", idB, "sim", similarity));
        session.close();
    }

    @Override
    public float getPedestrianSimilarity(@Nonnull String idA, @Nonnull String idB) throws NoSuchElementException {
        // Match the whole pattern and return the similarity, if the pattern exists.
        Session session = driver.session();
        StatementResult result = session.run("MATCH (p1:Person {trackletID: {id1}})-[s:Similar]->(p2:Person {trackletID: {id2}}) " +
                        "RETURN s.similarity;",
                Values.parameters("id1", idA, "id2", idB));
        session.close();
        if (result.hasNext()) {
            // Just return the first match.
            Record record = result.next();
            return record.get("s.similarity").asFloat();
        }
        // No match.
        throw new NoSuchElementException();
    }

    @Override
    public void setPedestrianAttributes(@Nonnull String nodeID, @Nonnull Attributes attr,Logger logger) {
        // Set attributes to an existing node or one newly created.
        Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {id}}) SET "
                        + "p.genderMale = {genderMale}, "
                        + "p.genderFemale = {genderFemale}, "
                        + "p.genderOther = {genderOther}, "
                        + "p.ageSixteen = {ageSixteen}, "
                        + "p.ageThirty = {ageThirty}, "
                        + "p.ageFortyFive = {ageFortyFive}, "
                        + "p.ageSixty = {ageSixty}, "
                        + "p.ageOlderSixty = {ageOlderSixty}, "
                        + "p.weightVeryFat = {weightVeryFat}, "
                        + "p.weightLittleFat = {weightLittleFat}, "
                        + "p.weightNormal = {weightNormal}, "
                        + "p.weightLittleThin = {weightLittleThin}, "
                        + "p.weightVeryThin = {weightVeryThin}, "
                        + "p.roleClient = {roleClient}, "
                        + "p.roleUniform = {roleUniform}, "
                        + "p.hairStyleNull = {hairStyleNull}, "
                        + "p.hairStyleLong = {hairStyleLong}, "
                        + "p.headShoulderBlackHair = {headShoulderBlackHair}, "
                        + "p.headShoulderWithHat = {headShoulderWithHat}, "
                        + "p.headShoulderGlasses = {headShoulderGlasses}, "
                        + "p.headShoulderSunglasses = {headShoulderSunglasses}, "
                        + "p.headShoulderScarf = {headShoulderScarf}, "
                        + "p.headShoulderMask = {headShoulderMask}, "
                        + "p.upperShirt = {upperShirt}, "
                        + "p.upperSweater = {upperSweater}, "
                        + "p.upperVest = {upperVest}, "
                        + "p.upperTshirt = {upperTshirt}, "
                        + "p.upperCotton = {upperCotton}, "
                        + "p.upperJacket = {upperJacket}, "
                        + "p.upperSuit = {upperSuit}, "
                        + "p.upperHoodie = {upperHoodie}, "
                        + "p.upperCotta = {upperCotta}, "
                        + "p.upperOther = {upperOther}, "
                        + "p.upperBlack = {upperBlack}, "
                        + "p.upperWhite = {upperWhite}, "
                        + "p.upperGray = {upperGray}, "
                        + "p.upperRed = {upperRed}, "
                        + "p.upperGreen = {upperGreen}, "
                        + "p.upperBlue = {upperBlue}, "
                        + "p.upperSilvery = {upperSilvery}, "
                        + "p.upperYellow = {upperYellow}, "
                        + "p.upperBrown = {upperBrown}, "
                        + "p.upperPurple = {upperPurple}, "
                        + "p.upperPink = {upperPink}, "
                        + "p.upperOrange = {upperOrange}, "
                        + "p.upperMixColor = {upperMixColor}, "
                        + "p.upperOtherColor = {upperOtherColor}, "
                        + "p.lowerPants = {lowerPants}, "
                        + "p.lowerShortPants = {lowerShortPants}, "
                        + "p.lowerSkirt = {lowerSkirt}, "
                        + "p.lowerShortSkirt = {lowerShortSkirt}, "
                        + "p.lowerLongSkirt = {lowerLongSkirt}, "
                        + "p.lowerOnePiece = {lowerOnePiece}, "
                        + "p.lowerJean = {lowerJean}, "
                        + "p.lowerTightPants = {lowerTightPants}, "
                        + "p.lowerBlack = {lowerBlack}, "
                        + "p.lowerWhite = {lowerWhite}, "
                        + "p.lowerGray = {lowerGray}, "
                        + "p.lowerRed = {lowerRed}, "
                        + "p.lowerGreen = {lowerGreen}, "
                        + "p.lowerBlue = {lowerBlue}, "
                        + "p.lowerSilver = {lowerSilver}, "
                        + "p.lowerYellow = {lowerYellow}, "
                        + "p.lowerBrown = {lowerBrown}, "
                        + "p.lowerPurple = {lowerPurple}, "
                        + "p.lowerPink = {lowerPink}, "
                        + "p.lowerOrange = {lowerOrange}, "
                        + "p.lowerMixColor = {lowerMixColor}, "
                        + "p.lowerOtherColor = {lowerOtherColor}, "
                        + "p.shoesLeather = {shoesLeather}, "
                        + "p.shoesSport = {shoesSport}, "
                        + "p.shoesBoot = {shoesBoot}, "
                        + "p.shoesCloth = {shoesCloth}, "
                        + "p.shoesShandle = {shoesShandle}, "
                        + "p.shoesCasual = {shoesCasual}, "
                        + "p.shoesOther = {shoesOther}, "
                        + "p.shoesBlack = {shoesBlack}, "
                        + "p.shoesWhite = {shoesWhite}, "
                        + "p.shoesGray = {shoesGray}, "
                        + "p.shoesRed = {shoesRed}, "
                        + "p.shoesGreen = {shoesGreen}, "
                        + "p.shoesBlue = {shoesBlue}, "
                        + "p.shoesSilver = {shoesSilver}, "
                        + "p.shoesYellow = {shoesYellow}, "
                        + "p.shoesBrown = {shoesBrown}, "
                        + "p.shoesPurple = {shoesPurple}, "
                        + "p.shoesPink = {shoesPink}, "
                        + "p.shoesOrange = {shoesOrange}, "
                        + "p.shoesMixColor = {shoesMixColor}, "
                        + "p.shoesOtherColor = {shoesOtherColor}, "
                        + "p.accessoryBackpack = {accessoryBackpack}, "
                        + "p.accessoryShoulderBag = {accessoryShoulderBag}, "
                        + "p.accessoryHandBag = {accessoryHandBag}, "
                        + "p.accessoryWaistBag = {accessoryWaistBag}, "
                        + "p.accessoryBox = {accessoryBox}, "
                        + "p.accessoryPlasticBag = {accessoryPlasticBag}, "
                        + "p.accessoryPaperBag = {accessoryPaperBag}, "
                        + "p.accessoryCart = {accessoryCart}, "
                        + "p.accessoryKid = {accessoryKid}, "
                        + "p.accessoryOther = {accessoryOther}, "
                        + "p.actionCalling = {actionCalling}, "
                        + "p.actionArmStretching = {actionArmStretching}, "
                        + "p.actionChatting = {actionChatting}, "
                        + "p.actionGathering = {actionGathering}, "
                        + "p.actionLying = {actionLying}, "
                        + "p.actionCrouching = {actionCrouching}, "
                        + "p.actionRunning = {actionRunning}, "
                        + "p.actionHoldThing = {actionHoldThing}, "
                        + "p.actionPushing = {actionPushing}, "
                        + "p.actionPulling = {actionPulling}, "
                        + "p.actionNipThing = {actionNipThing}, "
                        + "p.actionPicking = {actionPicking}, "
                        + "p.actionOther = {actionOther}, "
                        + "p.viewAngleLeft = {viewAngleLeft}, "
                        + "p.viewAngleRight = {viewAngleRight}, "
                        + "p.viewAngleFront = {viewAngleFront}, "
                        + "p.viewAngleBack = {viewAngleBack}, "
                        + "p.occlusionLeft = {occlusionLeft}, "
                        + "p.occlusionRight = {occlusionRight}, "
                        + "p.occlusionUp = {occlusionUp}, "
                        + "p.occlusionDown = {occlusionDown}, "
                        + "p.occlusionEnvironment = {occlusionEnvironment}, "
                        + "p.occlusionAccessory = {occlusionAccessory}, "
                        + "p.occlusionObject = {occlusionObject}, "
                        + "p.occlusionOther = {occlusionOther};",
                Values.parameters(
                        "id", nodeID,
                        "genderMale", attr.genderMale,
                        "genderFemale", attr.genderFemale,
                        "genderOther", attr.genderOther,
                        "ageSixteen", attr.ageSixteen,
                        "ageThirty", attr.ageThirty,
                        "ageFortyFive", attr.ageFortyFive,
                        "ageSixty", attr.ageSixty,
                        "ageOlderSixty", attr.ageOlderSixty,
                        "weightVeryFat", attr.weightVeryFat,
                        "weightLittleFat", attr.weightLittleFat,
                        "weightNormal", attr.weightNormal,
                        "weightLittleThin", attr.weightLittleThin,
                        "weightVeryThin", attr.weightVeryThin,
                        "roleClient", attr.roleClient,
                        "roleUniform", attr.roleUniform,
                        "hairStyleNull", attr.hairStyleNull,
                        "hairStyleLong", attr.hairStyleLong,
                        "headShoulderBlackHair", attr.headShoulderBlackHair,
                        "headShoulderWithHat", attr.headShoulderWithHat,
                        "headShoulderGlasses", attr.headShoulderGlasses,
                        "headShoulderSunglasses", attr.headShoulderSunglasses,
                        "headShoulderScarf", attr.headShoulderScarf,
                        "headShoulderMask", attr.headShoulderMask,
                        "upperShirt", attr.upperShirt,
                        "upperSweater", attr.upperSweater,
                        "upperVest", attr.upperVest,
                        "upperTshirt", attr.upperTshirt,
                        "upperCotton", attr.upperCotton,
                        "upperJacket", attr.upperJacket,
                        "upperSuit", attr.upperSuit,
                        "upperHoodie", attr.upperHoodie,
                        "upperCotta", attr.upperCotta,
                        "upperOther", attr.upperOther,
                        "upperBlack", attr.upperBlack,
                        "upperWhite", attr.upperWhite,
                        "upperGray", attr.upperGray,
                        "upperRed", attr.upperRed,
                        "upperGreen", attr.upperGreen,
                        "upperBlue", attr.upperBlue,
                        "upperSilvery", attr.upperSilvery,
                        "upperYellow", attr.upperYellow,
                        "upperBrown", attr.upperBrown,
                        "upperPurple", attr.upperPurple,
                        "upperPink", attr.upperPink,
                        "upperOrange", attr.upperOrange,
                        "upperMixColor", attr.upperMixColor,
                        "upperOtherColor", attr.upperOtherColor,
                        "lowerPants", attr.lowerPants,
                        "lowerShortPants", attr.lowerShortPants,
                        "lowerSkirt", attr.lowerSkirt,
                        "lowerShortSkirt", attr.lowerShortSkirt,
                        "lowerLongSkirt", attr.lowerLongSkirt,
                        "lowerOnePiece", attr.lowerOnePiece,
                        "lowerJean", attr.lowerJean,
                        "lowerTightPants", attr.lowerTightPants,
                        "lowerBlack", attr.lowerBlack,
                        "lowerWhite", attr.lowerWhite,
                        "lowerGray", attr.lowerGray,
                        "lowerRed", attr.lowerRed,
                        "lowerGreen", attr.lowerGreen,
                        "lowerBlue", attr.lowerBlue,
                        "lowerSilver", attr.lowerSilver,
                        "lowerYellow", attr.lowerYellow,
                        "lowerBrown", attr.lowerBrown,
                        "lowerPurple", attr.lowerPurple,
                        "lowerPink", attr.lowerPink,
                        "lowerOrange", attr.lowerOrange,
                        "lowerMixColor", attr.lowerMixColor,
                        "lowerOtherColor", attr.lowerOtherColor,
                        "shoesLeather", attr.shoesLeather,
                        "shoesSport", attr.shoesSport,
                        "shoesBoot", attr.shoesBoot,
                        "shoesCloth", attr.shoesCloth,
                        "shoesShandle", attr.shoesShandle,
                        "shoesCasual", attr.shoesCasual,
                        "shoesOther", attr.shoesOther,
                        "shoesBlack", attr.shoesBlack,
                        "shoesWhite", attr.shoesWhite,
                        "shoesGray", attr.shoesGray,
                        "shoesRed", attr.shoesRed,
                        "shoesGreen", attr.shoesGreen,
                        "shoesBlue", attr.shoesBlue,
                        "shoesSilver", attr.shoesSilver,
                        "shoesYellow", attr.shoesYellow,
                        "shoesBrown", attr.shoesBrown,
                        "shoesPurple", attr.shoesPurple,
                        "shoesPink", attr.shoesPink,
                        "shoesOrange", attr.shoesOrange,
                        "shoesMixColor", attr.shoesMixColor,
                        "shoesOtherColor", attr.shoesOtherColor,
                        "accessoryBackpack", attr.accessoryBackpack,
                        "accessoryShoulderBag", attr.accessoryShoulderBag,
                        "accessoryHandBag", attr.accessoryHandBag,
                        "accessoryWaistBag", attr.accessoryWaistBag,
                        "accessoryBox", attr.accessoryBox,
                        "accessoryPlasticBag", attr.accessoryPlasticBag,
                        "accessoryPaperBag", attr.accessoryPaperBag,
                        "accessoryCart", attr.accessoryCart,
                        "accessoryKid", attr.accessoryKid,
                        "accessoryOther", attr.accessoryOther,
                        "actionCalling", attr.actionCalling,
                        "actionArmStretching", attr.actionArmStretching,
                        "actionChatting", attr.actionChatting,
                        "actionGathering", attr.actionGathering,
                        "actionLying", attr.actionLying,
                        "actionCrouching", attr.actionCrouching,
                        "actionRunning", attr.actionRunning,
                        "actionHoldThing", attr.actionHoldThing,
                        "actionPushing", attr.actionPushing,
                        "actionPulling", attr.actionPulling,
                        "actionNipThing", attr.actionNipThing,
                        "actionPicking", attr.actionPicking,
                        "actionOther", attr.actionOther,
                        "viewAngleLeft", attr.viewAngleLeft,
                        "viewAngleRight", attr.viewAngleRight,
                        "viewAngleFront", attr.viewAngleFront,
                        "viewAngleBack", attr.viewAngleBack,
                        "occlusionLeft", attr.occlusionLeft,
                        "occlusionRight", attr.occlusionRight,
                        "occlusionUp", attr.occlusionUp,
                        "occlusionDown", attr.occlusionDown,
                        "occlusionEnvironment", attr.occlusionEnvironment,
                        "occlusionAccessory", attr.occlusionAccessory,
                        "occlusionObject", attr.occlusionObject,
                        "occlusionOther", attr.occlusionOther
                ));
        logger.info("插入的属性是："+attr.toString());
        session.close();
    }

    @Override
    public Attributes getPedestrianAttributes(@Nonnull String nodeID) throws NoSuchElementException {
        // Return attributes of an existing node, otherwise, return nothing.
        Session session = driver.session();
        StatementResult result = session.run("MATCH (p:Person {trackletID: {id}}) RETURN "
                        + "p.genderMale, "
                        + "p.genderFemale, "
                        + "p.genderOther, "
                        + "p.ageSixteen, "
                        + "p.ageThirty, "
                        + "p.ageFortyFive, "
                        + "p.ageSixty, "
                        + "p.ageOlderSixty, "
                        + "p.weightVeryFat, "
                        + "p.weightLittleFat, "
                        + "p.weightNormal, "
                        + "p.weightLittleThin, "
                        + "p.weightVeryThin, "
                        + "p.roleClient, "
                        + "p.roleUniform, "
                        + "p.hairStyleNull, "
                        + "p.hairStyleLong, "
                        + "p.headShoulderBlackHair, "
                        + "p.headShoulderWithHat, "
                        + "p.headShoulderGlasses, "
                        + "p.headShoulderSunglasses, "
                        + "p.headShoulderScarf, "
                        + "p.headShoulderMask, "
                        + "p.upperShirt, "
                        + "p.upperSweater, "
                        + "p.upperVest, "
                        + "p.upperTshirt, "
                        + "p.upperCotton, "
                        + "p.upperJacket, "
                        + "p.upperSuit, "
                        + "p.upperHoodie, "
                        + "p.upperCotta, "
                        + "p.upperOther, "
                        + "p.upperBlack, "
                        + "p.upperWhite, "
                        + "p.upperGray, "
                        + "p.upperRed, "
                        + "p.upperGreen, "
                        + "p.upperBlue, "
                        + "p.upperSilvery, "
                        + "p.upperYellow, "
                        + "p.upperBrown, "
                        + "p.upperPurple, "
                        + "p.upperPink, "
                        + "p.upperOrange, "
                        + "p.upperMixColor, "
                        + "p.upperOtherColor, "
                        + "p.lowerPants, "
                        + "p.lowerShortPants, "
                        + "p.lowerSkirt, "
                        + "p.lowerShortSkirt, "
                        + "p.lowerLongSkirt, "
                        + "p.lowerOnePiece, "
                        + "p.lowerJean, "
                        + "p.lowerTightPants, "
                        + "p.lowerBlack, "
                        + "p.lowerWhite, "
                        + "p.lowerGray, "
                        + "p.lowerRed, "
                        + "p.lowerGreen, "
                        + "p.lowerBlue, "
                        + "p.lowerSilver, "
                        + "p.lowerYellow, "
                        + "p.lowerBrown, "
                        + "p.lowerPurple, "
                        + "p.lowerPink, "
                        + "p.lowerOrange, "
                        + "p.lowerMixColor, "
                        + "p.lowerOtherColor, "
                        + "p.shoesLeather, "
                        + "p.shoesSport, "
                        + "p.shoesBoot, "
                        + "p.shoesCloth, "
                        + "p.shoesShandle, "
                        + "p.shoesCasual, "
                        + "p.shoesOther, "
                        + "p.shoesBlack, "
                        + "p.shoesWhite, "
                        + "p.shoesGray, "
                        + "p.shoesRed, "
                        + "p.shoesGreen, "
                        + "p.shoesBlue, "
                        + "p.shoesSilver, "
                        + "p.shoesYellow, "
                        + "p.shoesBrown, "
                        + "p.shoesPurple, "
                        + "p.shoesPink, "
                        + "p.shoesOrange, "
                        + "p.shoesMixColor, "
                        + "p.shoesOtherColor, "
                        + "p.accessoryBackpack, "
                        + "p.accessoryShoulderBag, "
                        + "p.accessoryHandBag, "
                        + "p.accessoryWaistBag, "
                        + "p.accessoryBox, "
                        + "p.accessoryPlasticBag, "
                        + "p.accessoryPaperBag, "
                        + "p.accessoryCart, "
                        + "p.accessoryKid, "
                        + "p.accessoryOther, "
                        + "p.actionCalling, "
                        + "p.actionArmStretching, "
                        + "p.actionChatting, "
                        + "p.actionGathering, "
                        + "p.actionLying, "
                        + "p.actionCrouching, "
                        + "p.actionRunning, "
                        + "p.actionHoldThing, "
                        + "p.actionPushing, "
                        + "p.actionPulling, "
                        + "p.actionNipThing, "
                        + "p.actionPicking, "
                        + "p.actionOther, "
                        + "p.viewAngleLeft, "
                        + "p.viewAngleRight, "
                        + "p.viewAngleFront, "
                        + "p.viewAngleBack, "
                        + "p.occlusionLeft, "
                        + "p.occlusionRight, "
                        + "p.occlusionUp, "
                        + "p.occlusionDown, "
                        + "p.occlusionEnvironment, "
                        + "p.occlusionAccessory, "
                        + "p.occlusionObject, "
                        + "p.occlusionOther;",
                Values.parameters("id", nodeID));
        session.close();
        if (result.hasNext()) {
            // Just return the first match.
            Attributes attr = new Attributes();
            Record record = result.next();

            attr.genderMale = record.get("p.genderMale").asFloat();
            attr.genderFemale = record.get("p.genderFemale").asFloat();
            attr.genderOther = record.get("p.genderOther").asFloat();
            attr.ageSixteen = record.get("p.ageSixteen").asFloat();
            attr.ageThirty = record.get("p.ageThirty").asFloat();
            attr.ageFortyFive = record.get("p.ageFortyFive").asFloat();
            attr.ageSixty = record.get("p.ageSixty").asFloat();
            attr.ageOlderSixty = record.get("p.ageOlderSixty").asFloat();
            attr.weightVeryFat = record.get("p.weightVeryFat").asFloat();
            attr.weightLittleFat = record.get("p.weightLittleFat").asFloat();
            attr.weightNormal = record.get("p.weightNormal").asFloat();
            attr.weightLittleThin = record.get("p.weightLittleThin").asFloat();
            attr.weightVeryThin = record.get("p.weightVeryThin").asFloat();
            attr.roleClient = record.get("p.roleClient").asFloat();
            attr.roleUniform = record.get("p.roleUniform").asFloat();
            attr.hairStyleNull = record.get("p.hairStyleNull").asFloat();
            attr.hairStyleLong = record.get("p.hairStyleLong").asFloat();
            attr.headShoulderBlackHair = record.get("p.headShoulderBlackHair").asFloat();
            attr.headShoulderWithHat = record.get("p.headShoulderWithHat").asFloat();
            attr.headShoulderGlasses = record.get("p.headShoulderGlasses").asFloat();
            attr.headShoulderSunglasses = record.get("p.headShoulderSunglasses").asFloat();
            attr.headShoulderScarf = record.get("p.headShoulderScarf").asFloat();
            attr.headShoulderMask = record.get("p.headShoulderMask").asFloat();
            attr.upperShirt = record.get("p.upperShirt").asFloat();
            attr.upperSweater = record.get("p.upperSweater").asFloat();
            attr.upperVest = record.get("p.upperVest").asFloat();
            attr.upperTshirt = record.get("p.upperTshirt").asFloat();
            attr.upperCotton = record.get("p.upperCotton").asFloat();
            attr.upperJacket = record.get("p.upperJacket").asFloat();
            attr.upperSuit = record.get("p.upperSuit").asFloat();
            attr.upperHoodie = record.get("p.upperHoodie").asFloat();
            attr.upperCotta = record.get("p.upperCotta").asFloat();
            attr.upperOther = record.get("p.upperOther").asFloat();
            attr.upperBlack = record.get("p.upperBlack").asFloat();
            attr.upperWhite = record.get("p.upperWhite").asFloat();
            attr.upperGray = record.get("p.upperGray").asFloat();
            attr.upperRed = record.get("p.upperRed").asFloat();
            attr.upperGreen = record.get("p.upperGreen").asFloat();
            attr.upperBlue = record.get("p.upperBlue").asFloat();
            attr.upperSilvery = record.get("p.upperSilvery").asFloat();
            attr.upperYellow = record.get("p.upperYellow").asFloat();
            attr.upperBrown = record.get("p.upperBrown").asFloat();
            attr.upperPurple = record.get("p.upperPurple").asFloat();
            attr.upperPink = record.get("p.upperPink").asFloat();
            attr.upperOrange = record.get("p.upperOrange").asFloat();
            attr.upperMixColor = record.get("p.upperMixColor").asFloat();
            attr.upperOtherColor = record.get("p.upperOtherColor").asFloat();
            attr.lowerPants = record.get("p.lowerPants").asFloat();
            attr.lowerShortPants = record.get("p.lowerShortPants").asFloat();
            attr.lowerSkirt = record.get("p.lowerSkirt").asFloat();
            attr.lowerShortSkirt = record.get("p.lowerShortSkirt").asFloat();
            attr.lowerLongSkirt = record.get("p.lowerLongSkirt").asFloat();
            attr.lowerOnePiece = record.get("p.lowerOnePiece").asFloat();
            attr.lowerJean = record.get("p.lowerJean").asFloat();
            attr.lowerTightPants = record.get("p.lowerTightPants").asFloat();
            attr.lowerBlack = record.get("p.lowerBlack").asFloat();
            attr.lowerWhite = record.get("p.lowerWhite").asFloat();
            attr.lowerGray = record.get("p.lowerGray").asFloat();
            attr.lowerRed = record.get("p.lowerRed").asFloat();
            attr.lowerGreen = record.get("p.lowerGreen").asFloat();
            attr.lowerBlue = record.get("p.lowerBlue").asFloat();
            attr.lowerSilver = record.get("p.lowerSilver").asFloat();
            attr.lowerYellow = record.get("p.lowerYellow").asFloat();
            attr.lowerBrown = record.get("p.lowerBrown").asFloat();
            attr.lowerPurple = record.get("p.lowerPurple").asFloat();
            attr.lowerPink = record.get("p.lowerPink").asFloat();
            attr.lowerOrange = record.get("p.lowerOrange").asFloat();
            attr.lowerMixColor = record.get("p.lowerMixColor").asFloat();
            attr.lowerOtherColor = record.get("p.lowerOtherColor").asFloat();
            attr.shoesLeather = record.get("p.shoesLeather").asFloat();
            attr.shoesSport = record.get("p.shoesSport").asFloat();
            attr.shoesBoot = record.get("p.shoesBoot").asFloat();
            attr.shoesCloth = record.get("p.shoesCloth").asFloat();
            attr.shoesShandle = record.get("p.shoesShandle").asFloat();
            attr.shoesCasual = record.get("p.shoesCasual").asFloat();
            attr.shoesOther = record.get("p.shoesOther").asFloat();
            attr.shoesBlack = record.get("p.shoesBlack").asFloat();
            attr.shoesWhite = record.get("p.shoesWhite").asFloat();
            attr.shoesGray = record.get("p.shoesGray").asFloat();
            attr.shoesRed = record.get("p.shoesRed").asFloat();
            attr.shoesGreen = record.get("p.shoesGreen").asFloat();
            attr.shoesBlue = record.get("p.shoesBlue").asFloat();
            attr.shoesSilver = record.get("p.shoesSilver").asFloat();
            attr.shoesYellow = record.get("p.shoesYellow").asFloat();
            attr.shoesBrown = record.get("p.shoesBrown").asFloat();
            attr.shoesPurple = record.get("p.shoesPurple").asFloat();
            attr.shoesPink = record.get("p.shoesPink").asFloat();
            attr.shoesOrange = record.get("p.shoesOrange").asFloat();
            attr.shoesMixColor = record.get("p.shoesMixColor").asFloat();
            attr.shoesOtherColor = record.get("p.shoesOtherColor").asFloat();
            attr.accessoryBackpack = record.get("p.accessoryBackpack").asFloat();
            attr.accessoryShoulderBag = record.get("p.accessoryShoulderBag").asFloat();
            attr.accessoryHandBag = record.get("p.accessoryHandBag").asFloat();
            attr.accessoryWaistBag = record.get("p.accessoryWaistBag").asFloat();
            attr.accessoryBox = record.get("p.accessoryBox").asFloat();
            attr.accessoryPlasticBag = record.get("p.accessoryPlasticBag").asFloat();
            attr.accessoryPaperBag = record.get("p.accessoryPaperBag").asFloat();
            attr.accessoryCart = record.get("p.accessoryCart").asFloat();
            attr.accessoryKid = record.get("p.accessoryKid").asFloat();
            attr.accessoryOther = record.get("p.accessoryOther").asFloat();
            attr.actionCalling = record.get("p.actionCalling").asFloat();
            attr.actionArmStretching = record.get("p.actionArmStretching").asFloat();
            attr.actionChatting = record.get("p.actionChatting").asFloat();
            attr.actionGathering = record.get("p.actionGathering").asFloat();
            attr.actionLying = record.get("p.actionLying").asFloat();
            attr.actionCrouching = record.get("p.actionCrouching").asFloat();
            attr.actionRunning = record.get("p.actionRunning").asFloat();
            attr.actionHoldThing = record.get("p.actionHoldThing").asFloat();
            attr.actionPushing = record.get("p.actionPushing").asFloat();
            attr.actionPulling = record.get("p.actionPulling").asFloat();
            attr.actionNipThing = record.get("p.actionNipThing").asFloat();
            attr.actionPicking = record.get("p.actionPicking").asFloat();
            attr.actionOther = record.get("p.actionOther").asFloat();
            attr.viewAngleLeft = record.get("p.viewAngleLeft").asFloat();
            attr.viewAngleRight = record.get("p.viewAngleRight").asFloat();
            attr.viewAngleFront = record.get("p.viewAngleFront").asFloat();
            attr.viewAngleBack = record.get("p.viewAngleBack").asFloat();
            attr.occlusionLeft = record.get("p.occlusionLeft").asFloat();
            attr.occlusionRight = record.get("p.occlusionRight").asFloat();
            attr.occlusionUp = record.get("p.occlusionUp").asFloat();
            attr.occlusionDown = record.get("p.occlusionDown").asFloat();
            attr.occlusionEnvironment = record.get("p.occlusionEnvironment").asFloat();
            attr.occlusionAccessory = record.get("p.occlusionAccessory").asFloat();
            attr.occlusionObject = record.get("p.occlusionObject").asFloat();
            attr.occlusionOther = record.get("p.occlusionOther").asFloat();

            return attr;
        }
        // No match.
        throw new NoSuchElementException();
    }

    @Override
    public Link[] getLinkedPedestrians(@Nonnull String nodeID) throws NoSuchElementException {
        // Match the whole pattern and, return the number of matches.
        Session session = driver.session();
        StatementResult result = session.run("MATCH (p1:Person {trackletID: {id}})-[s:Similar]->(p2:Person) RETURN count(*) AS num;", Values.parameters("id", nodeID));
        session.close();

        int num = 0;
        if (result.hasNext()) {
            Record record = result.next();
            num = record.get("num").asInt();
        }
        Link[] links = new Link[num];
        if (num == 0) {
            return links;
        }

        // Match the whole pattern and, return the other node and the similarity for each match.
        // Results are sorted in descending order.
        result = session.run("MATCH (p1:Person {trackletID: {id}})-[s:Similar]->(p2:Person) " +
                        "WITH s.similarity AS sim, p2.trackletID AS id2 ORDER BY sim DESC RETURN sim, id2;",
                Values.parameters("id", nodeID));
        int i = 0;
        while (result.hasNext()) {
            Record record = result.next();
            links[i++] = new Link(nodeID, record.get("id2").asString(), record.get("sim").asFloat());
        }
        return links;
    }

	@Override
	public void saveTrackletImg(String nodeID,int[] width) {
		// TODO Auto-generated method stub
		// Set path to an existing node or one newly created.
        Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {id}}) SET p.width={width};",
                Values.parameters("id", nodeID, "width", width));
      

        // Close session.
        session.close();
	}

	@Override
	public void setTrackletSavingPath(String nodeID, String path) {
		// TODO Auto-generated method stub
		Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {id}}) SET p.path={path};",
                Values.parameters("id", nodeID, "path", path));
        // Get the info of a tracklet.
        // Test (we don't need host:port when run on our platform).
        //String hostPort = "har://hdfs-kman-nod2:8020";
        //String storeDir = hostPort + path;
        //System.out.println("storeDir: " + storeDir);
        // End
        /*String storeDir = path;
        String trackletInfo = "1024";
        try {
            trackletInfo = getTrackletInfo(storeDir);
        } catch(IOException e1) {
        } catch(URISyntaxException e2) {
        }

        JsonParser jParser = new JsonParser();
        JsonObject jObject = jParser.parse(trackletInfo).getAsJsonObject();
        
        // Start frame index of a tracklet.
        int trackletStartIdx = jObject.get("run-frame-index").getAsInt();
        JsonObject jObjectId = jObject.get("id").getAsJsonObject();
        String videoStartTime= jObjectId.get("video-url").getAsString();
        // split videoStartTime with "-".
        videoStartTime = videoStartTime.split("-")[0];
        
        // bounding boxes.
        JsonArray jArrayBoundingBoxes = jObject.get("bounding-boxes").getAsJsonArray();
        String bbCoordinatesInfo = jArrayBoundingBoxes.toString();

        // Start time of a tracklet.
        String trackletStartTime = calTrackletStartTime(trackletStartIdx, 
                                                        videoStartTime);
        // Insert the information of boundingboxes, start time and start frame index.
        session.run("MATCH (p:Person {id: {id}}) SET " 
                  + "p.startTime=toint({startTime}), "
                  + "p.startIndex={startIndex}, "
                  + "p.boundingBoxes={boundingBoxes};",
                   Values.parameters(
                   "id", nodeID,
                   "startTime", trackletStartTime,
                   "startIndex",trackletStartIdx,
                   "boundingBoxes", bbCoordinatesInfo));
        // Insert relation.
        String queryYear = trackletStartTime.substring(0,4);
        String queryMon  = trackletStartTime.substring(0,6);
        String queryDay  = trackletStartTime.substring(0,8);
        String queryHour = trackletStartTime.substring(0,10);
        String run = "MATCH (n:Root)-[:HAS_YEAR]->(y:Year {year: toint({year})})-[:HAS_MONTH]->" +
        "(mon:Month {month: toint({month})})-[:HAS_DAY]->(d:Day {day: toint({day})})-[:HAS_HOUR]->" + 
        "(h:Hour {hour: toint({hour})})-[:HAS_MIN]->(min) WHERE toint(tostring(min.start)+'00')<=" +
        "toint({trackletStartTime}) AND toint({trackletStartTime})<=toint(tostring(min.end)+'59') " +
        "MATCH (p:Person {id: {id}}) MERGE (min)-[:INCLUDES_PERSON]->(p);";
        session.run(run, Values.parameters(
            "year", queryYear,
            "month",queryMon,
            "day",  queryDay,
            "hour", queryHour,
            "trackletStartTime", trackletStartTime,
            "trackletStartTime", trackletStartTime,
            "id",   nodeID
        ));
*/
        // Close session.
        session.close();
		
	}
	
	
	@Override
    public void setPedestrianReIDFeature(@Nonnull String nodeID,
                                         @Nonnull String dataType, 
                                         @Nonnull Feature fea) {
        Session session = driver.session();
        byte[] feature = fea.getBytes();
        String feaStringBase64 = Base64.encodeBase64String(feature);
        session.run("MERGE (p:Person {trackletID: {id}, dataType: {dataType}}) SET "
                  + "p.reidFeature={reidFeature};",
                  Values.parameters("id", nodeID, 
                                    "dataType", dataType, 
                                    "reidFeature", feaStringBase64));
        session.close();
    }

    @Override
    public Feature getPedestrianReIDFeature(@Nonnull String nodeID,
                                            @Nonnull String dataType) throws NoSuchElementException {
        Session session = driver.session();
        StatementResult result = session.run(
            "MATCH (p:Person {trackletID: {id}, dataType: {dataType}}) RETURN p.reidFeature;",
            Values.parameters("id", nodeID, "dataType", dataType)
        );
        session.close();
        if (result.hasNext()) {
            Record record = result.next();
            String featureBase64Str = record.get("p.reidFeature").asString();
            byte[] featureBytes = Base64.decodeBase64(featureBase64Str);
            Feature feature = new FeatureMSCAN(featureBytes);
            return feature;
        }
        throw new NoSuchElementException();
    }
    
    @Override
    public List<ReIdAttributesTemp> getPedestrianReIDFeatureList(@Nonnull String dataType) throws NoSuchElementException {
        Session session = driver.session();
        StatementResult result = session.run(
            "MATCH (p:Person {dataType: {dataType}}) RETURN p.trackletID,p.reidFeature,p.camID,p.startTime;",
            Values.parameters("dataType", dataType)
        );
        List<ReIdAttributesTemp> list=new ArrayList<>();
        while (result.hasNext()) {
            Record record = result.next();
            ReIdAttributesTemp reIdAttributesTemp=new ReIdAttributesTemp();
            String camID = record.get("p.camID").asString();
            Long startTime = (Long)record.get("p.startTime").asNumber();
            String trackletID = record.get("p.trackletID").asString();
            String featureBase64Str = record.get("p.reidFeature").asString();
            byte[] featureBytes = Base64.decodeBase64(featureBase64Str);
            Feature feature = new FeatureMSCAN(featureBytes);
            reIdAttributesTemp.setFeatureVector(feature.getVector());
            reIdAttributesTemp.setCamID(camID);
            reIdAttributesTemp.setTrackletID(trackletID);
//            reIdAttributesTemp.setReidFeature(featureBase64Str);
            reIdAttributesTemp.setStartTime(startTime);
//            list.add(feature.getVector());
            list.add(reIdAttributesTemp);
        }
        session.close();
        return list;
    }
    
    
    @Override
    public List<String> getPedestrianReIDFeatureBase64List(@Nonnull String dataType) throws NoSuchElementException {
        Session session = driver.session();
        StatementResult result = session.run(
            "MATCH (p:Person {dataType: {dataType}}) RETURN p.reidFeature;",
            Values.parameters("dataType", dataType)
        );
        List<String> list=new ArrayList<>();
        while (result.hasNext()) {
            Record record = result.next();
            String featureBase64Str = record.get("p.reidFeature").asString();
            byte[] featureBytes = Base64.decodeBase64(featureBase64Str);
            Feature feature = new FeatureMSCAN(featureBytes);
            list.add(featureBase64Str);
        }
        session.close();
        return list;
    }

	@Override
	public void addIsFinish(String nodeID, boolean isFinish) {
		// TODO Auto-generated method stub
		
		Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {id}}) SET p.isFinish={isFinish};",
                Values.parameters("id", nodeID, "isFinish", isFinish));
        session.close();
	}

	@Override
	public void addIsGetSim(String nodeID, boolean IsGetSim) {
		// TODO Auto-generated method stub
		Session session = driver.session();
        session.run("MERGE (p:Person {trackletID: {id}}) SET p.IsGetSim={IsGetSim};",
                Values.parameters("id", nodeID, "IsGetSim", IsGetSim));
        session.close();
	}

	@Override
	public void addSimRel( String nodeID1, String nodeID2, double SimRel) {
		// TODO Auto-generated method stub
		Session session = driver.session();
        session.run("MATCH (a:Person {trackletID: {id1}}), (b:Person {trackletID: {id2}}) MERGE (a)-[r:Similarity]->(b) set r.Minute={Minute};"
                ,Values.parameters("id1", nodeID1, "id2", nodeID2
                		,"Minute", SimRel
                		));
        session.close();
	}
	
	//删除不必要的节点
	public void delNode( String nodeID1) {
		// TODO Auto-generated method stub
		Session session = driver.session();
		StatementResult result =  session.run("MATCH (a:Person {trackletID: {id1}}) return a.path;"
                ,Values.parameters("id1", nodeID1));
        while (result.hasNext()) {
            Record record = result.next();
            String path = record.get("a.path").asString();
            System.out.println("out:"+path);
            if (path.equals("null")) {
            	System.out.println(path);
            	session.run("MATCH (a:Person {trackletID: {id1},path:{path}}) delete a;"
            			,Values.parameters("id1", nodeID1,"path",path));
			}
        }
        session.close();
	}

	@Override
	public List<float[]> getPedestrianReIDFeatureList(boolean isFinish, boolean IsGetSim)
			throws NoSuchElementException {
		// TODO Auto-generated method stub
		
		Session session = driver.session();
        StatementResult result = session.run(
            "MATCH (p:Person {isFinish: {isFinish},IsGetSim: {IsGetSim}}) RETURN p.reidFeature;",
            Values.parameters("isFinish", isFinish,"IsGetSim", IsGetSim)
        );
        List<float[]> list=new ArrayList<>();
        while (result.hasNext()) {
            Record record = result.next();
            String featureBase64Str = record.get("p.reidFeature").asString();
            byte[] featureBytes = Base64.decodeBase64(featureBase64Str);
            Feature feature = new FeatureMSCAN(featureBytes);
            list.add(feature.getVector());
        }
        session.close();
        return list;
	}

	@Override
	public List<Minute> getMinutes() {
		Session session = driver.session();
		StatementResult result = session.run("MATCH (n:Minute) RETURN n.start,n.end order by n.start;");
		List<Minute> list = new ArrayList<>();
		while (result.hasNext()) {
			Record record = result.next();
			Long start = (Long) record.get("n.start").asNumber();
			Long end = (Long) record.get("n.end").asNumber();
			Minute minute = new Minute();
			minute.setEnd(end);
			minute.setStart(start);
			list.add(minute);
		}
		session.close();
		return list;
	}

	@Override
	public List<ReIdAttributesTemp> getPedestrianReIDFeatureList(Minute minute) throws NoSuchElementException {
		// TODO Auto-generated method stub
		Session session = driver.session();
		List<ReIdAttributesTemp> list=new ArrayList<>();
			StatementResult result = session.run(
					"MATCH (a:Minute"
//					+ "{start:{start}}"
					+ ")-[:INCLUDES_PERSON]-(b:Person)  "
					+ "return b.trackletID,b.reidFeature,b.camID,b.startTime order by a.start limit 3;"
//					,Values.parameters("start", minute.getStart().longValue())
					);
			while (result.hasNext()) {
				Record record = result.next();
				ReIdAttributesTemp reIdAttributesTemp=new ReIdAttributesTemp();
				String camID = record.get("b.camID").asString();
				Long startTime = (Long)record.get("b.startTime").asNumber();
				String trackletID = record.get("b.trackletID").asString();
				String featureBase64Str = record.get("b.reidFeature").asString();
				if (!featureBase64Str.equals("null")) {
					byte[] featureBytes = Base64.decodeBase64(featureBase64Str);
					Feature feature = new FeatureMSCAN(featureBytes);
//					System.out.println(camID+","+id+","+startTime+","+feature.getVector());
					reIdAttributesTemp.setFeatureVector(feature.getVector());
					
				}
				reIdAttributesTemp.setCamID(camID);
				reIdAttributesTemp.setTrackletID(trackletID);
//            reIdAttributesTemp.setReidFeature(featureBase64Str);
				reIdAttributesTemp.setStartTime(startTime);
//            list.add(feature.getVector());
				list.add(reIdAttributesTemp);
			}
			
		
        session.close();
        return list;
	}
	
	
	
}
